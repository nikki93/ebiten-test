// Code generated by ebitenmobile. DO NOT EDIT.

// +build ios

#import <TargetConditionals.h>

#if TARGET_IPHONE_SIMULATOR || 0
#define EBITEN_METAL 0
#else
#define EBITEN_METAL 1
#endif

#import <stdint.h>
#import <UIKit/UIKit.h>
#import <GLKit/GLkit.h>

#import "Ebitenmobileview.objc.h"

@interface MobileEbitenViewController : UIViewController
@end

@implementation MobileEbitenViewController {
  UIView*  metalView_;
  GLKView* glkView_;
  bool     started_;
  bool     active_;
  bool     error_;
}

- (UIView*)metalView {
  if (!metalView_) {
    metalView_ = [[UIView alloc] init];
    metalView_.multipleTouchEnabled = YES;
  }
  return metalView_;
}

- (GLKView*)glkView {
  if (!glkView_) {
    glkView_ = [[GLKView alloc] init];
    glkView_.multipleTouchEnabled = YES;
  }
  return glkView_;
}

- (void)viewDidLoad {
  [super viewDidLoad];

  if (!started_) {
    @synchronized(self) {
      active_ = true;
    }
    started_ = true;
  }

#if EBITEN_METAL
  [self.view addSubview: self.metalView];
  EbitenmobileviewSetUIView((uintptr_t)(self.metalView));
#else
  self.glkView.delegate = (id<GLKViewDelegate>)(self);
  [self.view addSubview: self.glkView];

  EAGLContext *context = [[EAGLContext alloc] initWithAPI:kEAGLRenderingAPIOpenGLES2];
  [self glkView].context = context;
	
  [EAGLContext setCurrentContext:context];
#endif

  CADisplayLink *displayLink = [CADisplayLink displayLinkWithTarget:self selector:@selector(drawFrame)];
  [displayLink addToRunLoop:[NSRunLoop currentRunLoop] forMode:NSDefaultRunLoopMode];
}

- (void)viewWillLayoutSubviews {
  CGRect viewRect = [[self view] frame];
#if EBITEN_METAL
  [[self metalView] setFrame:viewRect];
#else
  [[self glkView] setFrame:viewRect];
#endif
}

- (void)viewDidLayoutSubviews {
  [super viewDidLayoutSubviews];
  CGRect viewRect = [[self view] frame];

  EbitenmobileviewLayout(viewRect.size.width, viewRect.size.height);
}

- (void)didReceiveMemoryWarning {
  [super didReceiveMemoryWarning];
  // Dispose of any resources that can be recreated.
  // TODO: Notify this to Go world?
}

- (void)drawFrame{
  @synchronized(self) {
    if (!active_) {
      return;
    }

#if EBITEN_METAL
    [self updateEbiten];
#else
    [[self glkView] setNeedsDisplay];
#endif
  }
}

- (void)glkView:(GLKView*)view drawInRect:(CGRect)rect {
  @synchronized(self) {
    [self updateEbiten];
  }
}

- (void)updateEbiten {
  if (error_) {
    return;
  }
  NSError* err = nil;
  EbitenmobileviewUpdate(&err);
  if (err != nil) {
    [self performSelectorOnMainThread:@selector(onErrorOnGameUpdate:)
                           withObject:err
                        waitUntilDone:NO];
    error_ = true;
  }
}

- (void)onErrorOnGameUpdate:(NSError*)err {
  NSLog(@"Error: %@", err);
}

- (void)updateTouches:(NSSet*)touches {
  for (UITouch* touch in touches) {
#if EBITEN_METAL
    if (touch.view != [self metalView]) {
      continue;
    }
#else
    if (touch.view != [self glkView]) {
      continue;
    }
#endif
    CGPoint location = [touch locationInView:touch.view];
    EbitenmobileviewUpdateTouchesOnIOS(touch.phase, (uintptr_t)touch, location.x, location.y);
  }
}

- (void)touchesBegan:(NSSet*)touches withEvent:(UIEvent*)event {
  [self updateTouches:touches];
}

- (void)touchesMoved:(NSSet*)touches withEvent:(UIEvent*)event {
  [self updateTouches:touches];
}

- (void)touchesEnded:(NSSet*)touches withEvent:(UIEvent*)event {
  [self updateTouches:touches];
}

- (void)touchesCancelled:(NSSet*)touches withEvent:(UIEvent*)event {
  [self updateTouches:touches];
}

- (void)suspendGame {
  NSAssert(started_, @"suspendGame msut not be called before viewDidLoad is called");

  @synchronized(self) {
    active_ = false;
    EbitenmobileviewSuspend();
  }
}

- (void)resumeGame {
  NSAssert(started_, @"resumeGame msut not be called before viewDidLoad is called");

  @synchronized(self) {
    active_ = true;
    EbitenmobileviewResume();
  }
}

@end
